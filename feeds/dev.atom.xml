<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevPad - dev</title><link href="http://xr09.github.io/" rel="alternate"></link><link href="http://xr09.github.io/feeds/dev.atom.xml" rel="self"></link><id>http://xr09.github.io/</id><updated>2017-03-21T11:42:00-04:00</updated><entry><title>Gitea As A Personal Git Ui</title><link href="http://xr09.github.io/gitea-as-a-personal-git-ui.html" rel="alternate"></link><published>2017-03-21T11:42:00-04:00</published><updated>2017-03-21T11:42:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2017-03-21:/gitea-as-a-personal-git-ui.html</id><summary type="html">&lt;p&gt;At work we've been running &lt;a class="reference external" href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; CE for the last 3 years and everyone is thrilled, amazing features, great user experience, and it gets better with every new release. Totally recommend Gitlab for heavy enterprise self-hosted Git. (and their &lt;a class="reference external" href="https://packages.gitlab.com/gitlab/gitlab-ce/"&gt;Omnibus …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;At work we've been running &lt;a class="reference external" href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; CE for the last 3 years and everyone is thrilled, amazing features, great user experience, and it gets better with every new release. Totally recommend Gitlab for heavy enterprise self-hosted Git. (and their &lt;a class="reference external" href="https://packages.gitlab.com/gitlab/gitlab-ce/"&gt;Omnibus&lt;/a&gt; Package is a breeze to get it up and running)&lt;/p&gt;
&lt;p&gt;But recently they launched &lt;a class="reference external" href="https://gitea.io/"&gt;Gitea&lt;/a&gt; (a patch friendly &lt;a class="reference external" href="https://gogs.io/"&gt;Gogs&lt;/a&gt; fork), written in Go (really fast, low on resources), very nice UI. With Gitlab covering all your needs... what is Gitea good for?&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://gitea.io/"&gt;&lt;img alt="Gitea" class="align-right" src="../images/gitea.png" /&gt;&lt;/a&gt;
&lt;p&gt;Since Internet (or company network) is not always at my reach, I have one strong use case for a small personal Git service, with a beautiful commit history empowered with issues, labels, milestones, all the good stuff. This is 2017, tracking issues and features with &lt;em&gt;TODO.txt&lt;/em&gt; is no fun.&lt;/p&gt;
&lt;p&gt;I'm now running Gitea on my laptop, it goes with me everywhere. No connection at home? It's okay, carry on. On vacations far away without any connectivity? It's okay, keep coding. Shipwreck on a desert island? It's okay, just fix the bug and eat bananas.&lt;/p&gt;
&lt;p&gt;I hope the devs keep it small and light, there's no competition in this niche and they're doing an amazing job.&lt;/p&gt;
&lt;div class="section" id="issues-view"&gt;
&lt;h2&gt;Issues View&lt;/h2&gt;
&lt;img alt="Gitea" src="../images/gitea-issues.jpeg" /&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://github.com/go-gitea/gitea/blob/master/conf/app.ini"&gt;several&lt;/a&gt; &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04"&gt;tutorials&lt;/a&gt; about &lt;a class="reference external" href="https://docs.gitea.io/en-us/install-from-binary/"&gt;installing&lt;/a&gt; Gitea, mix these with a local alias on &lt;strong&gt;/etc/hosts&lt;/strong&gt; and you're good to go. I'm using &lt;strong&gt;git.local&lt;/strong&gt; as my personal URL, so my git remotes look like &lt;strong&gt;https://git.local:3000/xr09/project.git&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is my &lt;strong&gt;app.ini&lt;/strong&gt;, you can use to tweak your own Gitea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="app-ini"&gt;
&lt;h2&gt;app.ini&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;APP_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Local Git
&lt;span class="nv"&gt;RUN_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; your.user
&lt;span class="nv"&gt;RUN_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; prod

&lt;span class="o"&gt;[&lt;/span&gt;database&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;DB_TYPE&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; sqlite3
&lt;span class="nv"&gt;HOST&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;PASSWD&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SSL_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; disable
&lt;span class="nv"&gt;PATH&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; data/gitea.db

&lt;span class="o"&gt;[&lt;/span&gt;repository&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; data/repos

&lt;span class="o"&gt;[&lt;/span&gt;server&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PROTOCOL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; https
&lt;span class="nv"&gt;DOMAIN&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; git.local
&lt;span class="nv"&gt;ROOT_URL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; https://git.local:3000/
&lt;span class="nv"&gt;HTTP_ADDR&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="nv"&gt;HTTP_PORT&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_SSH&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;OFFLINE_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;LANDING_PAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; explore
&lt;span class="nv"&gt;ENABLE_GZIP&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;CERT_FILE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; cert.pem
&lt;span class="nv"&gt;KEY_FILE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; key.pem

&lt;span class="o"&gt;[&lt;/span&gt;mailer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;cache&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ADAPTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; memory
&lt;span class="nv"&gt;INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;REGISTER_EMAIL_CONFIRM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_NOTIFY_MAIL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_REGISTRATION&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_CAPTCHA&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;REQUIRE_SIGNIN_VIEW&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;picture&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_GRAVATAR&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_FEDERATED_AVATAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;attachment&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ALLOWED_TYPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; image/jpeg&lt;span class="p"&gt;|&lt;/span&gt;image/png
&lt;span class="nv"&gt;MAX_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="nv"&gt;MAX_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;session&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PROVIDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; file
&lt;span class="nv"&gt;COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="git"></category><category term="admin"></category><category term="lifehack"></category></entry><entry><title>Compiling The Linux Kernel</title><link href="http://xr09.github.io/compiling-the-linux-kernel.html" rel="alternate"></link><published>2017-03-14T09:38:00-04:00</published><updated>2017-03-14T09:38:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2017-03-14:/compiling-the-linux-kernel.html</id><summary type="html">&lt;div class="section" id="the-little-guide-on-how-to-compile-the-linux-kernel"&gt;
&lt;h2&gt;The Little Guide on how to compile the Linux Kernel&lt;/h2&gt;
&lt;p&gt;This works for Debian/Ubuntu and other distros with minor tweaks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install build-essential fakeroot libncurses5-dev
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.10.2.tar …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-little-guide-on-how-to-compile-the-linux-kernel"&gt;
&lt;h2&gt;The Little Guide on how to compile the Linux Kernel&lt;/h2&gt;
&lt;p&gt;This works for Debian/Ubuntu and other distros with minor tweaks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install build-essential fakeroot libncurses5-dev
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.10.2.tar.xz
tar xf linux-4.10.2.tar.xz
&lt;span class="nb"&gt;cd&lt;/span&gt; linux-4.10.2/
cp /boot/config-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt; .config
make olddefconfig
make nconfig &lt;span class="c1"&gt;# tweak any settings, modules, etc (safe to skip)&lt;/span&gt;
nice fakeroot make -j5 bindeb-pkg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these steps you will have the kernel ready to install in a deb package.&lt;/p&gt;
&lt;p&gt;For other distros like Fedora/OpenSUSE it is pretty much the same, you just have to install the corresponding required packages with dnf/zypper and the final make target would be &lt;cite&gt;binrpm-pkg&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="kernel"></category><category term="debian"></category><category term="ubuntu"></category></entry><entry><title>Responsive At Last</title><link href="http://xr09.github.io/responsive-at-last.html" rel="alternate"></link><published>2017-02-09T11:12:00-05:00</published><updated>2017-02-09T11:12:00-05:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2017-02-09:/responsive-at-last.html</id><summary type="html">&lt;p&gt;Finally took the time and upgraded this blog with a responsive theme, this time with a variation of the default theme: &lt;a class="reference external" href="https://github.com/blueicefield/pelican-blueidea"&gt;BlueIdea&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I like a lot how it looks on mobile: clean and simple, lately so many themes out there …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Finally took the time and upgraded this blog with a responsive theme, this time with a variation of the default theme: &lt;a class="reference external" href="https://github.com/blueicefield/pelican-blueidea"&gt;BlueIdea&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I like a lot how it looks on mobile: clean and simple, lately so many themes out there look like a CSS Framework showcase.&lt;/p&gt;
&lt;p&gt;Few changes are being made to the theme, expect some turbulence. :)&lt;/p&gt;
</content><category term="pelican"></category></entry><entry><title>2015</title><link href="http://xr09.github.io/2015.html" rel="alternate"></link><published>2015-12-31T12:41:00-05:00</published><updated>2015-12-31T12:41:00-05:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2015-12-31:/2015.html</id><summary type="html">&lt;p&gt;This is my only post this year. Kind of a busy year.&lt;/p&gt;
&lt;p&gt;I've played a lot with some new technologies, dug deeper with some of the old ones.&lt;/p&gt;
&lt;p&gt;Below you can read a summary of some of the best stuff …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is my only post this year. Kind of a busy year.&lt;/p&gt;
&lt;p&gt;I've played a lot with some new technologies, dug deeper with some of the old ones.&lt;/p&gt;
&lt;p&gt;Below you can read a summary of some of the best stuff I've discovered (or re-discovered) this year.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ansible: Configuration management, devops best friend, loving it!&lt;/li&gt;
&lt;li&gt;Mosh: Mobile shell, SSH on UDP, great for roaming users&lt;/li&gt;
&lt;li&gt;Tmux: Terminal multiplexer, detach sessions, keep them running&lt;/li&gt;
&lt;li&gt;Monit: Restart a service if crashed, send report by mail&lt;/li&gt;
&lt;li&gt;Gunicorn: Great Python server, simple to use, great performance&lt;/li&gt;
&lt;li&gt;Debian 8: Best server operating system I've used, can't believe it's free&lt;/li&gt;
&lt;li&gt;Python: The more I use it, the more I like it&lt;/li&gt;
&lt;li&gt;Laravel: When restrained to use PHP, this is the less painful&lt;/li&gt;
&lt;li&gt;Gitlab: Your own self-hosted github&lt;/li&gt;
&lt;/ul&gt;
</content></entry><entry><title>Ferm - IPtables The Right Way</title><link href="http://xr09.github.io/ferm-iptables-the-right-way.html" rel="alternate"></link><published>2014-10-14T14:15:00-04:00</published><updated>2014-10-14T14:15:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-10-14:/ferm-iptables-the-right-way.html</id><summary type="html">&lt;p&gt;This is a small post but totally worth it. Just wanted to point out I've finally found the ultimate meta language for managing iptables: &lt;a class="reference external" href="http://ferm.foo-projects.org/"&gt;ferm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep this brief let's say Ferm is to IPtables as C is to ASM …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small post but totally worth it. Just wanted to point out I've finally found the ultimate meta language for managing iptables: &lt;a class="reference external" href="http://ferm.foo-projects.org/"&gt;ferm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep this brief let's say Ferm is to IPtables as C is to ASM. It gives you plenty of high level constructs to manage list of ports, ip addresses and so forth, heck you can even create functions with parameters and all.&lt;/p&gt;
&lt;p&gt;Let's give it a try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install ferm     &lt;span class="c1"&gt;# Debian/Ubuntu&lt;/span&gt;
$ yum install ferm          &lt;span class="c1"&gt;# Fedora/CentOS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have two new commands in your path: &lt;em&gt;ferm&lt;/em&gt; and &lt;em&gt;import-ferm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reading the man page and command help is a good start.&lt;/p&gt;
&lt;p&gt;Basically ferm reads the rule file and compiles to iptables, then it loads everything to the system with &lt;em&gt;iptables-restore&lt;/em&gt;, I recommend using &lt;em&gt;ferm -nl rules.ferm&lt;/em&gt; and keep tuning the file until you get what you need.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;import-ferm&lt;/em&gt; command reads you current iptables rules and prints the equivalent ferm rules to stdout. Of course it will be too explicit, you should define arrays and use all the cool features ferm provides.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import-ferm &amp;gt; /etc/ferm/rules.ferm &lt;span class="c1"&gt;# this could be a starting point&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Debian the ferm package also provides a service (something like iptables-persistent), this makes possible to have the rules written only with ferm syntax, they will be parsed each time the ferm service is started.&lt;/p&gt;
&lt;p&gt;Some simple rules to get you interested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@def &lt;span class="nv"&gt;$TRUSTED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.3.5 &lt;span class="m"&gt;10&lt;/span&gt;.0.5.0/24 &lt;span class="m"&gt;10&lt;/span&gt;.0.3.8&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

table filter &lt;span class="o"&gt;{&lt;/span&gt;
chain INPUT &lt;span class="o"&gt;{&lt;/span&gt;
    policy DROP&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# connection tracking&lt;/span&gt;
    mod state state &lt;span class="o"&gt;(&lt;/span&gt;ESTABLISHED RELATED&lt;span class="o"&gt;)&lt;/span&gt; ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# allow local connections&lt;/span&gt;
    interface lo ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# respond to ping&lt;/span&gt;
    proto icmp icmp-type echo-request ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# allow SSH connections to trusted addresses&lt;/span&gt;
    saddr &lt;span class="nv"&gt;$TRUSTED&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        proto tcp dport ssh ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# outgoing connections are not limited&lt;/span&gt;
chain OUTPUT policy ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# this is not a router&lt;/span&gt;
chain FORWARD policy DROP&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Debian Repo - Minimal Edition</title><link href="http://xr09.github.io/debian-repo-minimal-edition.html" rel="alternate"></link><published>2014-09-12T11:37:00-04:00</published><updated>2014-09-12T11:37:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-09-12:/debian-repo-minimal-edition.html</id><summary type="html">&lt;p&gt;Usually a Debian software repository is around 50 GB, it contains lots of software, documentation and debug packages, unless you are providing services to a wide range of clients then is likely you only need a fraction of those packages …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usually a Debian software repository is around 50 GB, it contains lots of software, documentation and debug packages, unless you are providing services to a wide range of clients then is likely you only need a fraction of those packages.&lt;/p&gt;
&lt;p&gt;Most people use &lt;a class="reference external" href="http://apt-mirror.github.io/"&gt;apt-mirror&lt;/a&gt; to download their repos but althought is pretty fast due to the multithread support (actually this only matters if you have a really good connection) I haven't found a way to filter packages, so we'll stick with &lt;a class="reference external" href="https://tracker.debian.org/pkg/debmirror"&gt;debmirror&lt;/a&gt; for now which has amazing results in this area.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;debmirror&lt;/em&gt; script has two main options for filtering the repo, &lt;em&gt;exclude-deb-section&lt;/em&gt; and &lt;em&gt;exclude&lt;/em&gt;, the former filters by package &lt;a class="reference external" href="https://packages.debian.org/stable/"&gt;section&lt;/a&gt; and the later by url, both options use regular &lt;a class="reference external" href="http://xkcd.com/1171/"&gt;expressions&lt;/a&gt; which can be tricky sometimes but we'll keep it simple.&lt;/p&gt;
&lt;p&gt;With a script like this you keep pruning the repository until the desired size is reached, thanks to this technique all my repos are smaller than 15GB nowadays.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debmirror --method&lt;span class="o"&gt;=&lt;/span&gt;http --config-file&lt;span class="o"&gt;=&lt;/span&gt;/opt/get-wheezy/wheezy.conf &lt;span class="se"&gt;\&lt;/span&gt;
--nosource /ftp/repos/debian/wheezy/debian/ --ignore-release-gpg &lt;span class="se"&gt;\&lt;/span&gt;
--nosource --no-check-gpg --postcleanup --allow-dist-rename &lt;span class="se"&gt;\&lt;/span&gt;
--root&lt;span class="o"&gt;=&lt;/span&gt;debian --rsync-extra&lt;span class="o"&gt;=&lt;/span&gt;none -d wheezy &lt;span class="se"&gt;\&lt;/span&gt;
--exclude-deb-section&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(games|debug|news|gnustep|ocaml|hamradio|gnu-r)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/i18n/Translation-.*\.bz2)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(kfreebsd-.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/python[0-9.]*-doc)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/.*coinor.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.*java.*doc.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.*debian.*reference.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save you some &lt;em&gt;du&lt;/em&gt; and &lt;em&gt;find&lt;/em&gt; hacking, I've set up a github &lt;a class="reference external" href="https://github.com/xr09/debian-mini-repo"&gt;repo&lt;/a&gt; with all my working filters, take into account I'm running Debian Stable (or testing sometimes) with KDE and my main programming language is Python, however I do not filter necesary packages to compile other software.&lt;/p&gt;
&lt;p&gt;If you find any new package to filter please make a pull request and I'll take it into consideration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This config works ok for me, you may have to &lt;em&gt;unfilter&lt;/em&gt; some packages according to your own needs.&lt;/p&gt;
</content><category term="debian"></category><category term="debmirror"></category><category term="repo"></category></entry><entry><title>Cron Scheduling For The Fancy</title><link href="http://xr09.github.io/cron-scheduling-for-the-fancy.html" rel="alternate"></link><published>2014-04-01T16:42:00-04:00</published><updated>2014-04-01T16:42:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-04-01:/cron-scheduling-for-the-fancy.html</id><summary type="html">&lt;p&gt;Cron is a powerful tool for a sysadmin, the fact that you are able to run tasks at any time, any day, is amazing.&lt;/p&gt;
&lt;p&gt;The regular cron is ok for like 99% of the needs, there's no need for anything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cron is a powerful tool for a sysadmin, the fact that you are able to run tasks at any time, any day, is amazing.&lt;/p&gt;
&lt;p&gt;The regular cron is ok for like 99% of the needs, there's no need for anything else unless you want to go fancy.&lt;/p&gt;
&lt;p&gt;So let's get fancy.&lt;/p&gt;
&lt;p&gt;Have you ever wanted to run a task the first monday of the month? Or maybe the second friday? Third Thursday?... Last Sunday? You get it.&lt;/p&gt;
&lt;p&gt;That's fancy requirements, the regular implementation of cron on most distros can't do it, but there's an easy fix.&lt;/p&gt;
&lt;p&gt;By taking advantage of the fact that what cron actually executes is a bash command we can hack its behavior a little. You can check for the desired date with bash and execute the desired command according to the obtained result.&lt;/p&gt;
&lt;p&gt;Check this for running a task only the first saturday of the month.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-7 * * root &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s1"&gt;&amp;#39;+\%a&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sat&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /root/myfirstsaturdaybackup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The cron will run from day 1 to 7, but the script is executed only when the &lt;em&gt;[date]&lt;/em&gt; check is true i.e. the only saturday between day 1 and 7.&lt;/p&gt;
&lt;p&gt;This looks like a good ad-hoc solution but I wanted something less error prone and easier to use.&lt;/p&gt;
&lt;p&gt;So I created &lt;a class="reference external" href="https://github.com/xr09/cron-last-sunday"&gt;cron-last-sunday&lt;/a&gt; just for that.&lt;/p&gt;
&lt;p&gt;To install it, just copy the script &lt;em&gt;run-if-today&lt;/em&gt; to /usr/bin/ or anywhere on the path&lt;/p&gt;
&lt;p&gt;You can use it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; * * &lt;span class="m"&gt;6&lt;/span&gt; root run-if-today &lt;span class="m"&gt;1&lt;/span&gt; Sat &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /root/myfirstsaturdaybackup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This task will run every saturday (see the 6 before &lt;em&gt;root&lt;/em&gt;), but the script will trigger only on the first one, you could even run the task every day &amp;quot;* * *&amp;quot; and the script would only run on the first saturday.&lt;/p&gt;
&lt;p&gt;Check out a task for last sunday of the month:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; * * &lt;span class="m"&gt;7&lt;/span&gt; root run-if-today L Sun &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch /opt/last-sunday
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;strong&gt;L&lt;/strong&gt; or &lt;strong&gt;l&lt;/strong&gt; for last, granted to work on february and leap years. ;)&lt;/p&gt;
&lt;p&gt;Please read the &lt;a class="reference external" href="https://github.com/xr09/cron-last-sunday/blob/master/run-if-today"&gt;code&lt;/a&gt; if you want to see how it works, it's pretty short and simple. I even put a bad joke or two.&lt;/p&gt;
</content><category term="unix"></category><category term="cron"></category><category term="admin"></category></entry><entry><title>Porting TwentyTwelve</title><link href="http://xr09.github.io/porting-twentytwelve.html" rel="alternate"></link><published>2014-02-07T08:57:00-05:00</published><updated>2014-02-07T08:57:00-05:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-02-07:/porting-twentytwelve.html</id><summary type="html">&lt;p&gt;I'm working on a port of the &lt;a class="reference external" href="http://twentytwelvedemo.wordpress.com/"&gt;TwentyTwelve&lt;/a&gt; Wordpress theme for Pelican, right now is in alpha state but progressing incrementally. Despite the amount of work and responsabilities I have at the moment, this little project is a stress relief …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm working on a port of the &lt;a class="reference external" href="http://twentytwelvedemo.wordpress.com/"&gt;TwentyTwelve&lt;/a&gt; Wordpress theme for Pelican, right now is in alpha state but progressing incrementally. Despite the amount of work and responsabilities I have at the moment, this little project is a stress relief.&lt;/p&gt;
&lt;p&gt;There's a snapshot of this blog with TwentyTwelve right &lt;a class="reference external" href="http://xr09.github.io/TwentyTwelve/"&gt;here&lt;/a&gt;, check it out.&lt;/p&gt;
&lt;p&gt;If anybody want to help then just &lt;a class="reference external" href="https://github.com/xr09/TwentyTwelve"&gt;fork&lt;/a&gt; it.&lt;/p&gt;
</content><category term="pelican"></category><category term="blog"></category></entry><entry><title>Fast Git Clone</title><link href="http://xr09.github.io/fast-git-clone.html" rel="alternate"></link><published>2014-01-31T14:07:00-05:00</published><updated>2014-01-31T14:07:00-05:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-01-31:/fast-git-clone.html</id><summary type="html">&lt;p&gt;Lots of tutorials nowadays recommend using &lt;cite&gt;git clone&lt;/cite&gt; to get a project's source code, that's fine for little projects but for the big ones is a waste of bandwith, space, and more importantly, of your precious time.&lt;/p&gt;
&lt;p&gt;Whenever you need …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lots of tutorials nowadays recommend using &lt;cite&gt;git clone&lt;/cite&gt; to get a project's source code, that's fine for little projects but for the big ones is a waste of bandwith, space, and more importantly, of your precious time.&lt;/p&gt;
&lt;p&gt;Whenever you need to clone a git repo from the internet and you plan to just use the contents and no need for past history, then the good old &lt;cite&gt;git clone&lt;/cite&gt; is a waste of bandwith, that command gets the whole repo history, that is every line change that has been commited since the beginning of development, you just need the latest state of files so let's tweak a little to simulate the &amp;quot;Download ZIP&amp;quot; button on the github page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --depth &lt;span class="m"&gt;1&lt;/span&gt; https://github.com/apenwarr/sshuttle.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way you get the latest copy of a project's master branch, no history and minimize usage of network resources. That's fast!&lt;/p&gt;
&lt;p&gt;From &lt;strong&gt;man git clone&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--depth &amp;lt;depth&amp;gt;
      Create a shallow clone with a history truncated to the specified
      number of revisions. A shallow repository has a number of
      limitations (you cannot clone or fetch from it, nor push from nor
      into it), but is adequate if you are only interested in the recent
      history of a large project with a long history, and would want to
      send in fixes as patches.
&lt;/pre&gt;&lt;/div&gt;
</content><category term="git"></category></entry><entry><title>New Admin In Town</title><link href="http://xr09.github.io/new-admin-in-town.html" rel="alternate"></link><published>2014-01-29T12:13:00-05:00</published><updated>2014-01-29T12:13:00-05:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-01-29:/new-admin-in-town.html</id><summary type="html">&lt;p&gt;Two months ago I took a new position at work: network admin, so had to dive deeper into the great world of security, scalability, connectivity, backups... everyday I learn new network concepts or some cool hardware for a specific task …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two months ago I took a new position at work: network admin, so had to dive deeper into the great world of security, scalability, connectivity, backups... everyday I learn new network concepts or some cool hardware for a specific task, interesting stuff.&lt;/p&gt;
&lt;p&gt;I'm trying hard to keep up the pace with my personal projects (new ideas to code), but lately bash is more common than python in my &lt;strong&gt;workspace&lt;/strong&gt; folder, ain't no shame in that since bash is mandatory on every admin toolbox.&lt;/p&gt;
</content><category term="job"></category><category term="admin"></category></entry><entry><title>Bash Rolodex</title><link href="http://xr09.github.io/bash-rolodex.html" rel="alternate"></link><published>2013-10-04T08:15:00-04:00</published><updated>2013-10-04T08:15:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2013-10-04:/bash-rolodex.html</id><summary type="html">&lt;p&gt;There's been a while since I have a &lt;em&gt;rolodex.txt&lt;/em&gt; in my &lt;em&gt;ideas_for_projects&lt;/em&gt;
directory, although there are &lt;a class="reference external" href="https://www.google.com/search?q=rolodex+programs"&gt;several&lt;/a&gt; options out there, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rolodex"&gt;this&lt;/a&gt; is the
kind of program nobody resists to reimplement, so here I go.&lt;/p&gt;
&lt;p&gt;My first idea was a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's been a while since I have a &lt;em&gt;rolodex.txt&lt;/em&gt; in my &lt;em&gt;ideas_for_projects&lt;/em&gt;
directory, although there are &lt;a class="reference external" href="https://www.google.com/search?q=rolodex+programs"&gt;several&lt;/a&gt; options out there, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rolodex"&gt;this&lt;/a&gt; is the
kind of program nobody resists to reimplement, so here I go.&lt;/p&gt;
&lt;p&gt;My first idea was a PyQt UI with a SQlite db, simple, fast and pragmatic,
some UX mojo and the magic is done. But never had the time to start it,
damn, lately I have no time to start anything at all, and that's a pity
because I love starting things (almost as much as releasing those things).&lt;/p&gt;
&lt;p&gt;So the situation gets worst, I needed something quick and simple to manage
all my phone numbers and no time for boilerplate code, just &lt;em&gt;the thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well in the last year I've been immersed reading lots of bash code at work,
made a couple of &lt;a class="reference external" href="https://github.com/xr09/kaos"&gt;new&lt;/a&gt; bash &lt;a class="reference external" href="https://github.com/xr09/rainbow.sh"&gt;projects&lt;/a&gt; myself and I'm really enjoying its
pragmatism, is just plain talk with the system, so lets make a rolodex with bash.&lt;/p&gt;
&lt;div class="section" id="the-thing"&gt;
&lt;h2&gt;The Thing&lt;/h2&gt;
&lt;p&gt;First, this rolodex uses a text file with all the info using one line
per contact. Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dave number
john number1 number2
ana number
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file will be in: &lt;em&gt;~/.my_contacts&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then all we need is a way to add new contacts to that file and search them later.&lt;/p&gt;
&lt;p&gt;Easy cake with Bash, just put these two functions on &lt;em&gt;~/.bashrc&lt;/em&gt; and we're done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;addnumber&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.my_contacts
&lt;span class="o"&gt;}&lt;/span&gt;

number&lt;span class="o"&gt;(){&lt;/span&gt;
  grep -i &lt;span class="nv"&gt;$1&lt;/span&gt; ~/.my_contacts
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the workflow for using this rolodex would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ addnumber moss the nerd &lt;span class="m"&gt;45645456&lt;/span&gt;
$ addnumber jennifer public relations &lt;span class="m"&gt;98989898&lt;/span&gt;
$ addnumber roy the mad irish &lt;span class="m"&gt;12121212&lt;/span&gt;
$ number jen
$ jennifer public relations &lt;span class="m"&gt;98989898&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe you want to mess with the contacts, fix bad info, remove some old entry, etc..
in that case, fire up your editor and go nuts changing everything, is just a
simple text file.&lt;/p&gt;
&lt;p&gt;No big fancy buttons this time but as I promised you have your rolodex in bash,
as pragmatic as it gets.&lt;/p&gt;
&lt;/div&gt;
</content><category term="rolodex"></category><category term="unix"></category><category term="bash"></category></entry><entry><title>Pelican looks great</title><link href="http://xr09.github.io/pelican-looks-great.html" rel="alternate"></link><published>2013-10-01T13:13:00-04:00</published><updated>2013-10-01T13:13:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2013-10-01:/pelican-looks-great.html</id><summary type="html">&lt;p&gt;Just got my pelican working, awesome, I struggled for a while with dependencies and even wanted to give up and check some alternatives but in the end I got it, loving Pelican so far.&lt;/p&gt;
&lt;p&gt;For begginers trying to get a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just got my pelican working, awesome, I struggled for a while with dependencies and even wanted to give up and check some alternatives but in the end I got it, loving Pelican so far.&lt;/p&gt;
&lt;p&gt;For begginers trying to get a Pelican site, you should get acquainted with virtualenv, pip and I'd say virtualenvwrapper too, this is bread and butter on python world nowadays, so go for it right now.&lt;/p&gt;
&lt;p&gt;Create a virtualenv, install pelican on it, create you blog directory with the respective settings.py, source and output folders inside, then just write your posts on Restructured Text or Markdown as you prefer and compile with a command like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican blog/ -s settings.py -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was thinking on writing just-another-pelican-tutorial but I'll recommend one of the many I've found, read &lt;a class="reference external" href="http://fjavieralba.com/pelican-a-static-blog-generator-for-pythonistas.html"&gt;this&lt;/a&gt; one and enjoy Pelican.&lt;/p&gt;
</content><category term="pelican"></category></entry></feed>