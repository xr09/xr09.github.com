<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevPad</title><link href="https://xr09.github.io/" rel="alternate"></link><link href="https://xr09.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://xr09.github.io/</id><updated>2017-03-21T11:42:00-04:00</updated><entry><title>Gitea As A Personal Git Ui</title><link href="https://xr09.github.io/gitea-as-a-personal-git-ui.html" rel="alternate"></link><published>2017-03-21T11:42:00-04:00</published><updated>2017-03-21T11:42:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2017-03-21:/gitea-as-a-personal-git-ui.html</id><summary type="html">&lt;p&gt;At work we've been running &lt;a class="reference external" href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; CE for the last 3 years and everyone is thrilled, amazing features, great user experience, and it gets better with every new release. Totally recommend Gitlab for heavy enterprise self-hosted Git. (and their &lt;a class="reference external" href="https://packages.gitlab.com/gitlab/gitlab-ce/"&gt;Omnibus …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;At work we've been running &lt;a class="reference external" href="https://about.gitlab.com/"&gt;Gitlab&lt;/a&gt; CE for the last 3 years and everyone is thrilled, amazing features, great user experience, and it gets better with every new release. Totally recommend Gitlab for heavy enterprise self-hosted Git. (and their &lt;a class="reference external" href="https://packages.gitlab.com/gitlab/gitlab-ce/"&gt;Omnibus&lt;/a&gt; Package is a breeze to get it up and running)&lt;/p&gt;
&lt;p&gt;But recently they launched &lt;a class="reference external" href="https://gitea.io/"&gt;Gitea&lt;/a&gt; (a patch friendly &lt;a class="reference external" href="https://gogs.io/"&gt;Gogs&lt;/a&gt; fork), written in Go (really fast, low on resources), very nice UI. With Gitlab covering all your needs... what is Gitea good for?&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://gitea.io/"&gt;&lt;img alt="Gitea" class="align-right" src="../images/gitea.png" /&gt;&lt;/a&gt;
&lt;p&gt;Since Internet (or company network) is not always at my reach, I have one strong use case for a small personal Git service, with a beautiful commit history empowered with issues, labels, milestones, all the good stuff. This is 2017, tracking issues and features with &lt;em&gt;TODO.txt&lt;/em&gt; is not fun anymore.&lt;/p&gt;
&lt;p&gt;I'm now running Gitea on my laptop, it goes with me everywhere. No connection at home? It's okay, carry on. On vacations far away without any connectivity? It's okay, keep coding. Shipwreck on a desert island? It's okay, just fix the bug and eat bananas.&lt;/p&gt;
&lt;p&gt;I hope the devs keep it small and light, there's no competition in this niche and they're doing an amazing job.&lt;/p&gt;
&lt;div class="section" id="issues-view"&gt;
&lt;h2&gt;Issues View&lt;/h2&gt;
&lt;img alt="Gitea" src="../images/gitea-issues.jpeg" /&gt;
&lt;p&gt;There are &lt;a class="reference external" href="https://github.com/go-gitea/gitea/blob/master/conf/app.ini"&gt;several&lt;/a&gt; &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-set-up-gogs-on-ubuntu-14-04"&gt;tutorials&lt;/a&gt; about &lt;a class="reference external" href="https://docs.gitea.io/en-us/install-from-binary/"&gt;installing&lt;/a&gt; Gitea, mix these with a local alias on &lt;strong&gt;/etc/hosts&lt;/strong&gt; and you're good to go. I'm using &lt;strong&gt;git.local&lt;/strong&gt; as my personal URL, so my git remotes look like &lt;strong&gt;https://git.local:3000/xr09/project.git&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This is my &lt;strong&gt;app.ini&lt;/strong&gt;, you can use to tweak your own Gitea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="app-ini"&gt;
&lt;h2&gt;app.ini&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;APP_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; Local Git
&lt;span class="nv"&gt;RUN_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; your.user
&lt;span class="nv"&gt;RUN_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; prod

&lt;span class="o"&gt;[&lt;/span&gt;database&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;DB_TYPE&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; sqlite3
&lt;span class="nv"&gt;HOST&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;USER&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;PASSWD&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;SSL_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; disable
&lt;span class="nv"&gt;PATH&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; data/gitea.db

&lt;span class="o"&gt;[&lt;/span&gt;repository&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; data/repos

&lt;span class="o"&gt;[&lt;/span&gt;server&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PROTOCOL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; https
&lt;span class="nv"&gt;DOMAIN&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; git.local
&lt;span class="nv"&gt;ROOT_URL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; https://git.local:3000/
&lt;span class="nv"&gt;HTTP_ADDR&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;span class="nv"&gt;HTTP_PORT&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3000&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_SSH&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;OFFLINE_MODE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;LANDING_PAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; explore
&lt;span class="nv"&gt;ENABLE_GZIP&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;CERT_FILE&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; cert.pem
&lt;span class="nv"&gt;KEY_FILE&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; key.pem

&lt;span class="o"&gt;[&lt;/span&gt;mailer&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;cache&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ADAPTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; memory
&lt;span class="nv"&gt;INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;REGISTER_EMAIL_CONFIRM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_NOTIFY_MAIL&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_REGISTRATION&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_CAPTCHA&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;REQUIRE_SIGNIN_VIEW&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;picture&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;DISABLE_GRAVATAR&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ENABLE_FEDERATED_AVATAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;attachment&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nv"&gt;ALLOWED_TYPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; image/jpeg&lt;span class="p"&gt;|&lt;/span&gt;image/png
&lt;span class="nv"&gt;MAX_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="nv"&gt;MAX_FILES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;session&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;PROVIDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; file
&lt;span class="nv"&gt;COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; yes
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="git"></category><category term="admin"></category><category term="lifehack"></category></entry><entry><title>Compiling The Linux Kernel</title><link href="https://xr09.github.io/compiling-the-linux-kernel.html" rel="alternate"></link><published>2017-03-14T09:38:00-04:00</published><updated>2017-03-14T09:38:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2017-03-14:/compiling-the-linux-kernel.html</id><summary type="html">&lt;div class="section" id="the-little-guide-on-how-to-compile-the-linux-kernel"&gt;
&lt;h2&gt;The Little Guide on how to compile the Linux Kernel&lt;/h2&gt;
&lt;p&gt;This works for Debian/Ubuntu and other distros with minor tweaks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install build-essential fakeroot libncurses5-dev
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.10.2.tar …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-little-guide-on-how-to-compile-the-linux-kernel"&gt;
&lt;h2&gt;The Little Guide on how to compile the Linux Kernel&lt;/h2&gt;
&lt;p&gt;This works for Debian/Ubuntu and other distros with minor tweaks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt install build-essential fakeroot libncurses5-dev
wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.10.2.tar.xz
tar xf linux-4.10.2.tar.xz
&lt;span class="nb"&gt;cd&lt;/span&gt; linux-4.10.2/
cp /boot/config-&lt;span class="sb"&gt;`&lt;/span&gt;uname -r&lt;span class="sb"&gt;`&lt;/span&gt; .config
make olddefconfig
make nconfig &lt;span class="c1"&gt;# tweak any settings, modules, etc (safe to skip)&lt;/span&gt;
nice fakeroot make -j5 bindeb-pkg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After these steps you will have the kernel ready to install in a deb package.&lt;/p&gt;
&lt;p&gt;For other distros like Fedora/OpenSUSE it is pretty much the same, you just have to install the corresponding required packages with dnf/zypper and the final make target would be &lt;cite&gt;binrpm-pkg&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="linux"></category><category term="kernel"></category><category term="debian"></category><category term="ubuntu"></category></entry><entry><title>Ferm - IPtables The Right Way</title><link href="https://xr09.github.io/ferm-iptables-the-right-way.html" rel="alternate"></link><published>2014-10-14T14:15:00-04:00</published><updated>2014-10-14T14:15:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-10-14:/ferm-iptables-the-right-way.html</id><summary type="html">&lt;p&gt;This is a small post but totally worth it. Just wanted to point out I've finally found the ultimate meta language for managing iptables: &lt;a class="reference external" href="http://ferm.foo-projects.org/"&gt;ferm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep this brief let's say Ferm is to IPtables as C is to ASM …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small post but totally worth it. Just wanted to point out I've finally found the ultimate meta language for managing iptables: &lt;a class="reference external" href="http://ferm.foo-projects.org/"&gt;ferm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep this brief let's say Ferm is to IPtables as C is to ASM. It gives you plenty of high level constructs to manage list of ports, ip addresses and so forth, heck you can even create functions with parameters and all.&lt;/p&gt;
&lt;p&gt;Let's give it a try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aptitude install ferm     &lt;span class="c1"&gt;# Debian/Ubuntu&lt;/span&gt;
$ yum install ferm          &lt;span class="c1"&gt;# Fedora/CentOS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have two new commands in your path: &lt;em&gt;ferm&lt;/em&gt; and &lt;em&gt;import-ferm&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reading the man page and command help is a good start.&lt;/p&gt;
&lt;p&gt;Basically ferm reads the rule file and compiles to iptables, then it loads everything to the system with &lt;em&gt;iptables-restore&lt;/em&gt;, I recommend using &lt;em&gt;ferm -nl rules.ferm&lt;/em&gt; and keep tuning the file until you get what you need.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;import-ferm&lt;/em&gt; command reads you current iptables rules and prints the equivalent ferm rules to stdout. Of course it will be too explicit, you should define arrays and use all the cool features ferm provides.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import-ferm &amp;gt; /etc/ferm/rules.ferm &lt;span class="c1"&gt;# this could be a starting point&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On Debian the ferm package also provides a service (something like iptables-persistent), this makes possible to have the rules written only with ferm syntax, they will be parsed each time the ferm service is started.&lt;/p&gt;
&lt;p&gt;Some simple rules to get you interested:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@def &lt;span class="nv"&gt;$TRUSTED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;.0.3.5 &lt;span class="m"&gt;10&lt;/span&gt;.0.5.0/24 &lt;span class="m"&gt;10&lt;/span&gt;.0.3.8&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

table filter &lt;span class="o"&gt;{&lt;/span&gt;
chain INPUT &lt;span class="o"&gt;{&lt;/span&gt;
    policy DROP&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# connection tracking&lt;/span&gt;
    mod state state &lt;span class="o"&gt;(&lt;/span&gt;ESTABLISHED RELATED&lt;span class="o"&gt;)&lt;/span&gt; ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# allow local connections&lt;/span&gt;
    interface lo ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# respond to ping&lt;/span&gt;
    proto icmp icmp-type echo-request ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# allow SSH connections to trusted addresses&lt;/span&gt;
    saddr &lt;span class="nv"&gt;$TRUSTED&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        proto tcp dport ssh ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# outgoing connections are not limited&lt;/span&gt;
chain OUTPUT policy ACCEPT&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# this is not a router&lt;/span&gt;
chain FORWARD policy DROP&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Debian Repo - Minimal Edition</title><link href="https://xr09.github.io/debian-repo-minimal-edition.html" rel="alternate"></link><published>2014-09-12T11:37:00-04:00</published><updated>2014-09-12T11:37:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-09-12:/debian-repo-minimal-edition.html</id><summary type="html">&lt;p&gt;Usually a Debian software repository is around 50 GB, it contains lots of software, documentation and debug packages, unless you are providing services to a wide range of clients then is likely you only need a fraction of those packages …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Usually a Debian software repository is around 50 GB, it contains lots of software, documentation and debug packages, unless you are providing services to a wide range of clients then is likely you only need a fraction of those packages.&lt;/p&gt;
&lt;p&gt;Most people use &lt;a class="reference external" href="http://apt-mirror.github.io/"&gt;apt-mirror&lt;/a&gt; to download their repos but althought is pretty fast due to the multithread support (actually this only matters if you have a really good connection) I haven't found a way to filter packages, so we'll stick with &lt;a class="reference external" href="https://tracker.debian.org/pkg/debmirror"&gt;debmirror&lt;/a&gt; for now which has amazing results in this area.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;debmirror&lt;/em&gt; script has two main options for filtering the repo, &lt;em&gt;exclude-deb-section&lt;/em&gt; and &lt;em&gt;exclude&lt;/em&gt;, the former filters by package &lt;a class="reference external" href="https://packages.debian.org/stable/"&gt;section&lt;/a&gt; and the later by url, both options use regular &lt;a class="reference external" href="http://xkcd.com/1171/"&gt;expressions&lt;/a&gt; which can be tricky sometimes but we'll keep it simple.&lt;/p&gt;
&lt;p&gt;With a script like this you keep pruning the repository until the desired size is reached, thanks to this technique all my repos are smaller than 15GB nowadays.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debmirror --method&lt;span class="o"&gt;=&lt;/span&gt;http --config-file&lt;span class="o"&gt;=&lt;/span&gt;/opt/get-wheezy/wheezy.conf &lt;span class="se"&gt;\&lt;/span&gt;
--nosource /ftp/repos/debian/wheezy/debian/ --ignore-release-gpg &lt;span class="se"&gt;\&lt;/span&gt;
--nosource --no-check-gpg --postcleanup --allow-dist-rename &lt;span class="se"&gt;\&lt;/span&gt;
--root&lt;span class="o"&gt;=&lt;/span&gt;debian --rsync-extra&lt;span class="o"&gt;=&lt;/span&gt;none -d wheezy &lt;span class="se"&gt;\&lt;/span&gt;
--exclude-deb-section&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(games|debug|news|gnustep|ocaml|hamradio|gnu-r)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/i18n/Translation-.*\.bz2)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(kfreebsd-.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/python[0-9.]*-doc)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --include&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/.*coinor.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.*java.*doc.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
      --exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(.*debian.*reference.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To save you some &lt;em&gt;du&lt;/em&gt; and &lt;em&gt;find&lt;/em&gt; hacking, I've set up a github &lt;a class="reference external" href="https://github.com/xr09/debian-mini-repo"&gt;repo&lt;/a&gt; with all my working filters, take into account I'm running Debian Stable (or testing sometimes) with KDE and my main programming language is Python, however I do not filter necesary packages to compile other software.&lt;/p&gt;
&lt;p&gt;If you find any new package to filter please make a pull request and I'll take it into consideration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This config works ok for me, you may have to &lt;em&gt;unfilter&lt;/em&gt; some packages according to your own needs.&lt;/p&gt;
</content><category term="debian"></category><category term="debmirror"></category><category term="repo"></category></entry><entry><title>Running The Latest Debmirror On CentOS 5</title><link href="https://xr09.github.io/running-the-latest-debmirror-on-centos-5.html" rel="alternate"></link><published>2014-04-30T14:59:00-04:00</published><updated>2014-04-30T14:59:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-04-30:/running-the-latest-debmirror-on-centos-5.html</id><summary type="html">&lt;div class="section" id="to-sync-a-deb-repo"&gt;
&lt;h2&gt;To sync a deb repo&lt;/h2&gt;
&lt;p&gt;So, today at work we had to download the brand new Ubuntu 14.04, there are two options to do it: apt-mirror and debmirror.&lt;/p&gt;
&lt;p&gt;The advantage of apt-mirror is the ability to download a repo …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="to-sync-a-deb-repo"&gt;
&lt;h2&gt;To sync a deb repo&lt;/h2&gt;
&lt;p&gt;So, today at work we had to download the brand new Ubuntu 14.04, there are two options to do it: apt-mirror and debmirror.&lt;/p&gt;
&lt;p&gt;The advantage of apt-mirror is the ability to download a repo with multiple threads, if bandwith is not an issue then your downloads will fly, on the bad side you can't filter unwanted sections of a repo, it's all or nothing.&lt;/p&gt;
&lt;p&gt;Debmirror on the other side gives you the ability to filter by repo sections or even regular expressions, over the years I've tuned my filters and now Debian Wheezy fits on just ~12 GB, avoiding nearly 40 Gb of unused packages.&lt;/p&gt;
&lt;p&gt;On the bad side debmirror doesn't supports threads, but let's face it, the ability of pruning a repo is priceless, not only because of space but also bandwith, if your company maintains a local Debian/Ubuntu repo then having around 10 GB of games and 5 more on debug packages is pointless.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pruning-method"&gt;
&lt;h2&gt;Pruning method&lt;/h2&gt;
&lt;p&gt;Our pruning technique will be shared in a future post, but just to have an idea is nothing more than using the &lt;em&gt;--exclude&lt;/em&gt; and &lt;em&gt;--exclude-deb-section&lt;/em&gt; options from debmirror:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--exclude-deb-section&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(games|debug|news|electronics)&amp;#39;&lt;/span&gt;
--exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/myspell-pt.*&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--exclude&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(/libhdf5-doc.*)&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="current-status"&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;This procedure is fairly easy on a recent distro, but let's assume we have CentOS 5.9 with Perl 5.8 and debmirror &lt;em&gt;20090807&lt;/em&gt; and we want the latest debmirror which needs a recent Perl interpreter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="attack-plan"&gt;
&lt;h2&gt;Attack plan&lt;/h2&gt;
&lt;p&gt;Is not a good idea to start messing with the default Perl installation, the safest choice is installing a new version somewhere like &lt;em&gt;/opt/&lt;/em&gt; and using it from there.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.activestate.com/activeperl/downloads"&gt;ActivePerl&lt;/a&gt; is a perfect choice for this case, just download and install on &lt;em&gt;/opt/ActivePerl/&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now check the interpreter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/opt/ActivePerl/bin/perl -v
This is perl &lt;span class="m"&gt;5&lt;/span&gt;, version &lt;span class="m"&gt;16&lt;/span&gt;, subversion &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;v5.16.3&lt;span class="o"&gt;)&lt;/span&gt; built &lt;span class="k"&gt;for&lt;/span&gt; i686-linux-thread-multi
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Perfect, now just drop in a recent &lt;a class="reference external" href="http://ftp.de.debian.org/debian/pool/main/d/debmirror/debmirror_2.16.tar.gz"&gt;debmirror&lt;/a&gt; script and change the &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Shebang_%28Unix%29"&gt;shebang&lt;/a&gt; to point to the new Perl.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/opt/ActivePerl-5.16/bin/perl -w&lt;/span&gt;

&lt;span class="o"&gt;=&lt;/span&gt;head1 NAME
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="perl-modules"&gt;
&lt;h2&gt;Perl Modules&lt;/h2&gt;
&lt;p&gt;If you try to use this you'll get an error, debmirror needs a module not included in ActivePerl by default &amp;quot;LockFile::Simple&amp;quot;, easy fix, just have to &lt;a class="reference external" href="http://www.activestate.com/blog/2010/10/how-install-cpan-modules-activeperl"&gt;install&lt;/a&gt; it from CPAN.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/opt/ActivePerl/bin/cpan LockFile::Simple
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Remember to export http_proxy in case you need it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sync-baby-sync"&gt;
&lt;h2&gt;Sync Baby, Sync!&lt;/h2&gt;
&lt;p&gt;The rest is easy cake, now you have a recent debmirror with a brand new Perl interpreter running on top of the old crusty CentOS 5. Rejoice.&lt;/p&gt;
&lt;/div&gt;
</content><category term="centos"></category><category term="perl"></category><category term="debmirror"></category><category term="debian"></category><category term="ubuntu"></category></entry><entry><title>Stripping Down Centos</title><link href="https://xr09.github.io/stripping-down-centos.html" rel="alternate"></link><published>2014-04-16T10:28:00-04:00</published><updated>2014-04-16T10:28:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-04-16:/stripping-down-centos.html</id><summary type="html">&lt;div class="section" id="why-strip"&gt;
&lt;h2&gt;Why Strip?&lt;/h2&gt;
&lt;p&gt;If you have some legacy CentOS server and performance is an issue, chances are someone installed the vanilla way, then configured the needed services and not even tuned it a little. You can get some performance by disabling …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="why-strip"&gt;
&lt;h2&gt;Why Strip?&lt;/h2&gt;
&lt;p&gt;If you have some legacy CentOS server and performance is an issue, chances are someone installed the vanilla way, then configured the needed services and not even tuned it a little. You can get some performance by disabling unused services or using lighter alternatives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notice"&gt;
&lt;h2&gt;Notice&lt;/h2&gt;
&lt;p&gt;This is not a step-by-step guide to install a minimal CentOS system, there are millions of those on the web, this aims at a specific use case: when you inherited an old server and you need to tweak it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-htop"&gt;
&lt;h2&gt;Use htop&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;htop&lt;/em&gt; gives you a great view of how resources are being used in your system. Check any &lt;em&gt;resource hog&lt;/em&gt; and cut it down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-cut-it"&gt;
&lt;h2&gt;How to cut it?&lt;/h2&gt;
&lt;p&gt;Cups for example has nothing to do on a web server, let's turn it off.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig cups off          &lt;span class="c1"&gt;# disable service on startup&lt;/span&gt;
service cups stop           &lt;span class="c1"&gt;# stop the service&lt;/span&gt;
chkconfig --list cups
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now cups is down for good, use those resources wisely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="running-x"&gt;
&lt;h2&gt;Running X?&lt;/h2&gt;
&lt;p&gt;Why is that server running X at all? gdm running? This is *nix, if you need X in a server (I never did so far) then &lt;em&gt;startx&lt;/em&gt; is your guy. For X on a server use light stuff like IceWm or similar, not Gnome.&lt;/p&gt;
&lt;p&gt;By default CentOS installs X with Gnome, the easiest way to disable this is by changing the system runlevel.&lt;/p&gt;
&lt;p&gt;Before running &lt;strong&gt;init 3&lt;/strong&gt; please save you some troubles and check this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig --list &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;3:off&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;5:on&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If by any chance an important service was set up to run on level 5 and not on 3 then my friend you are going to have a bad day.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;root@server123 ~&lt;span class="o"&gt;]&lt;/span&gt;  chkconfig --list &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;3:off&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;5:on&amp;quot;&lt;/span&gt;
named           &lt;span class="m"&gt;0&lt;/span&gt;:off   &lt;span class="m"&gt;1&lt;/span&gt;:off   &lt;span class="m"&gt;2&lt;/span&gt;:off   &lt;span class="m"&gt;3&lt;/span&gt;:off   &lt;span class="m"&gt;4&lt;/span&gt;:off   &lt;span class="m"&gt;5&lt;/span&gt;:on    &lt;span class="m"&gt;6&lt;/span&gt;:off
readahead_later &lt;span class="m"&gt;0&lt;/span&gt;:off   &lt;span class="m"&gt;1&lt;/span&gt;:off   &lt;span class="m"&gt;2&lt;/span&gt;:off   &lt;span class="m"&gt;3&lt;/span&gt;:off   &lt;span class="m"&gt;4&lt;/span&gt;:off   &lt;span class="m"&gt;5&lt;/span&gt;:on    &lt;span class="m"&gt;6&lt;/span&gt;:off
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the example above &lt;em&gt;named&lt;/em&gt; and &lt;em&gt;readahead_later&lt;/em&gt; are set up to run on runlevel 5 (multiuser with graphics) but not 3 (multiuser), let's fix it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chkconfig named on
chkconfig readahead_later on
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To change the system default runlevel open &lt;em&gt;/etc/inittab&lt;/em&gt; and set &lt;strong&gt;id:5:initdefault:&lt;/strong&gt; to &lt;strong&gt;id:3:initdefault:&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Or just use the &lt;em&gt;l33t way&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sed -i &lt;span class="s1"&gt;&amp;#39;/id:5:initdefault/ s/5/3/&amp;#39;&lt;/span&gt; /etc/inittab
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now open &lt;a class="reference external" href="https://www.google.com.cu/search?q=tmux+tutorial"&gt;tmux&lt;/a&gt; split in half and run &lt;em&gt;htop&lt;/em&gt; in one side and &lt;em&gt;init 3&lt;/em&gt; on the other (or just &lt;em&gt;init 3&lt;/em&gt; if you're not into multiplexing, though you should be) this way you are able to check the resources being released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-great-tip"&gt;
&lt;h2&gt;A great tip?&lt;/h2&gt;
&lt;p&gt;Replace Apache with Nginx for static files, one of my CentOS was serving a few distros repositories for like a hundred workstations with Apache 2.2, I tried Nginx, now I smile every time I login and see this: &lt;strong&gt;load average: 0.00, 0.00, 0.00&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important: I do not recommend uninstalling any packages on a legacy system unless you are 120% sure is ok, just disable services instead. Follow this rule or embrace desperation.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="centos"></category><category term="performance"></category><category term="tuning"></category></entry><entry><title>Cron Scheduling For The Fancy</title><link href="https://xr09.github.io/cron-scheduling-for-the-fancy.html" rel="alternate"></link><published>2014-04-01T16:42:00-04:00</published><updated>2014-04-01T16:42:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2014-04-01:/cron-scheduling-for-the-fancy.html</id><summary type="html">&lt;p&gt;Cron is a powerful tool for a sysadmin, the fact that you are able to run tasks at any time, any day, is amazing.&lt;/p&gt;
&lt;p&gt;The regular cron is ok for like 99% of the needs, there's no need for anything …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Cron is a powerful tool for a sysadmin, the fact that you are able to run tasks at any time, any day, is amazing.&lt;/p&gt;
&lt;p&gt;The regular cron is ok for like 99% of the needs, there's no need for anything else unless you want to go fancy.&lt;/p&gt;
&lt;p&gt;So let's get fancy.&lt;/p&gt;
&lt;p&gt;Have you ever wanted to run a task the first monday of the month? Or maybe the second friday? Third Thursday?... Last Sunday? You get it.&lt;/p&gt;
&lt;p&gt;That's fancy requirements, the regular implementation of cron on most distros can't do it, but there's an easy fix.&lt;/p&gt;
&lt;p&gt;By taking advantage of the fact that what cron actually executes is a bash command we can hack its behavior a little. You can check for the desired date with bash and execute the desired command according to the obtained result.&lt;/p&gt;
&lt;p&gt;Check this for running a task only the first saturday of the month.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;-7 * * root &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s1"&gt;&amp;#39;+\%a&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sat&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /root/myfirstsaturdaybackup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The cron will run from day 1 to 7, but the script is executed only when the &lt;em&gt;[date]&lt;/em&gt; check is true i.e. the only saturday between day 1 and 7.&lt;/p&gt;
&lt;p&gt;This looks like a good ad-hoc solution but I wanted something less error prone and easier to use.&lt;/p&gt;
&lt;p&gt;So I created &lt;a class="reference external" href="https://github.com/xr09/cron-last-sunday"&gt;cron-last-sunday&lt;/a&gt; just for that.&lt;/p&gt;
&lt;p&gt;To install it, just copy the script &lt;em&gt;run-if-today&lt;/em&gt; to /usr/bin/ or anywhere on the path&lt;/p&gt;
&lt;p&gt;You can use it like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; * * &lt;span class="m"&gt;6&lt;/span&gt; root run-if-today &lt;span class="m"&gt;1&lt;/span&gt; Sat &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /root/myfirstsaturdaybackup.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This task will run every saturday (see the 6 before &lt;em&gt;root&lt;/em&gt;), but the script will trigger only on the first one, you could even run the task every day &amp;quot;* * *&amp;quot; and the script would only run on the first saturday.&lt;/p&gt;
&lt;p&gt;Check out a task for last sunday of the month:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; * * &lt;span class="m"&gt;7&lt;/span&gt; root run-if-today L Sun &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch /opt/last-sunday
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;strong&gt;L&lt;/strong&gt; or &lt;strong&gt;l&lt;/strong&gt; for last, granted to work on february and leap years. ;)&lt;/p&gt;
&lt;p&gt;Please read the &lt;a class="reference external" href="https://github.com/xr09/cron-last-sunday/blob/master/run-if-today"&gt;code&lt;/a&gt; if you want to see how it works, it's pretty short and simple. I even put a bad joke or two.&lt;/p&gt;
</content><category term="unix"></category><category term="cron"></category><category term="admin"></category></entry><entry><title>Bash Rolodex</title><link href="https://xr09.github.io/bash-rolodex.html" rel="alternate"></link><published>2013-10-04T08:15:00-04:00</published><updated>2013-10-04T08:15:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2013-10-04:/bash-rolodex.html</id><summary type="html">&lt;p&gt;There's been a while since I have a &lt;em&gt;rolodex.txt&lt;/em&gt; in my &lt;em&gt;ideas_for_projects&lt;/em&gt;
directory, although there are &lt;a class="reference external" href="https://www.google.com/search?q=rolodex+programs"&gt;several&lt;/a&gt; options out there, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rolodex"&gt;this&lt;/a&gt; is the
kind of program nobody resists to reimplement, so here I go.&lt;/p&gt;
&lt;p&gt;My first idea was a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There's been a while since I have a &lt;em&gt;rolodex.txt&lt;/em&gt; in my &lt;em&gt;ideas_for_projects&lt;/em&gt;
directory, although there are &lt;a class="reference external" href="https://www.google.com/search?q=rolodex+programs"&gt;several&lt;/a&gt; options out there, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rolodex"&gt;this&lt;/a&gt; is the
kind of program nobody resists to reimplement, so here I go.&lt;/p&gt;
&lt;p&gt;My first idea was a PyQt UI with a SQlite db, simple, fast and pragmatic,
some UX mojo and the magic is done. But never had the time to start it,
damn, lately I have no time to start anything at all, and that's a pity
because I love starting things (almost as much as releasing those things).&lt;/p&gt;
&lt;p&gt;So the situation gets worst, I needed something quick and simple to manage
all my phone numbers and no time for boilerplate code, just &lt;em&gt;the thing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Well in the last year I've been immersed reading lots of bash code at work,
made a couple of &lt;a class="reference external" href="https://github.com/xr09/kaos"&gt;new&lt;/a&gt; bash &lt;a class="reference external" href="https://github.com/xr09/rainbow.sh"&gt;projects&lt;/a&gt; myself and I'm really enjoying its
pragmatism, is just plain talk with the system, so lets make a rolodex with bash.&lt;/p&gt;
&lt;div class="section" id="the-thing"&gt;
&lt;h2&gt;The Thing&lt;/h2&gt;
&lt;p&gt;First, this rolodex uses a text file with all the info using one line
per contact. Like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dave number
john number1 number2
ana number
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file will be in: &lt;em&gt;~/.my_contacts&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then all we need is a way to add new contacts to that file and search them later.&lt;/p&gt;
&lt;p&gt;Easy cake with Bash, just put these two functions on &lt;em&gt;~/.bashrc&lt;/em&gt; and we're done.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;addnumber&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.my_contacts
&lt;span class="o"&gt;}&lt;/span&gt;

number&lt;span class="o"&gt;(){&lt;/span&gt;
  grep -i &lt;span class="nv"&gt;$1&lt;/span&gt; ~/.my_contacts
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the workflow for using this rolodex would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ addnumber moss the nerd &lt;span class="m"&gt;45645456&lt;/span&gt;
$ addnumber jennifer public relations &lt;span class="m"&gt;98989898&lt;/span&gt;
$ addnumber roy the mad irish &lt;span class="m"&gt;12121212&lt;/span&gt;
$ number jen
$ jennifer public relations &lt;span class="m"&gt;98989898&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Maybe you want to mess with the contacts, fix bad info, remove some old entry, etc..
in that case, fire up your editor and go nuts changing everything, is just a
simple text file.&lt;/p&gt;
&lt;p&gt;No big fancy buttons this time but as I promised you have your rolodex in bash,
as pragmatic as it gets.&lt;/p&gt;
&lt;/div&gt;
</content><category term="rolodex"></category><category term="unix"></category><category term="bash"></category></entry><entry><title>Pelican looks great</title><link href="https://xr09.github.io/pelican-looks-great.html" rel="alternate"></link><published>2013-10-01T13:13:00-04:00</published><updated>2013-10-01T13:13:00-04:00</updated><author><name>Manuel Gutierrez</name></author><id>tag:xr09.github.io,2013-10-01:/pelican-looks-great.html</id><summary type="html">&lt;p&gt;Just got my pelican working, awesome, I struggled for a while with dependencies and even wanted to give up and check some alternatives but in the end I got it, loving Pelican so far.&lt;/p&gt;
&lt;p&gt;For begginers trying to get a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just got my pelican working, awesome, I struggled for a while with dependencies and even wanted to give up and check some alternatives but in the end I got it, loving Pelican so far.&lt;/p&gt;
&lt;p&gt;For begginers trying to get a Pelican site, you should get acquainted with virtualenv, pip and I'd say virtualenvwrapper too, this is bread and butter on python world nowadays, so go for it right now.&lt;/p&gt;
&lt;p&gt;Create a virtualenv, install pelican on it, create you blog directory with the respective settings.py, source and output folders inside, then just write your posts on Restructured Text or Markdown as you prefer and compile with a command like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican blog/ -s settings.py -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I was thinking on writing just-another-pelican-tutorial but I'll recommend one of the many I've found, read &lt;a class="reference external" href="http://fjavieralba.com/pelican-a-static-blog-generator-for-pythonistas.html"&gt;this&lt;/a&gt; one and enjoy Pelican.&lt;/p&gt;
</content><category term="pelican"></category></entry></feed>